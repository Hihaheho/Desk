%start Expr
%title "Rust-like syntax for Desk-lang"
%comment ""

%scanner String {
    %auto_newline_off
    %auto_ws_off
}

%scanner InlineComment {
    %auto_ws_off
}

%scanner BlockComment {
    %auto_newline_off
    %auto_ws_off
}

%%

Expr: Comment Expr
    | Hole
    | Do
    | Cast
    | Literal
    | Let
    | Perform
    | Continue
    | Handle
    | Product
    | Vector
    | Set
    | Attributed
    | Match
    | Function
    | Apply
    | Reference
    | Labeled
    | NewTipe
    | Card
    | Brand
    ;
    Do: DoKey^ Expr StmtEnd^ Expr;
    Cast: ParamsBegin^ Ty ParamsEnd^ Expr;
    Literal: Integer | Float | String;
        Integer: "\-?\p{Nd}+"
               | "\-?0x[0-9a-fA-F]+"
               | "\-?0o[0-7]+"
               | "\-?0b[01]+";
        Float: "\-?\p{Nd}+\.\p{Nd}";
        String: "\u{0022}([^\\]|\\.)*\u{0022}";
    Let: LetKey^ Expr [ TyAnno^ Ty ] StmtEnd^ Expr;
    Perform: PerformSym^ [ EArrow^ Ty ] Expr;
    Continue: ContinueSym^ Expr;
    Handle: HandleKey^ Expr BlockBegin^ { Handler } BlockEnd^;
        Handler: Ty EArrow^ Ty MatchArrow^ CaseBlock;
    Product: ProductKey^ BlockBegin^ [ Exprs ] BlockEnd^;
    Vector: VecBegin^ [ Exprs ] VecEnd^;
    Set: SetKey^ BlockBegin^ [ Exprs ] BlockEnd^;
    Attributed: Attribute Expr;
    Match: MatchKey^ Expr BlockBegin^ { Case } BlockEnd^;
        Case: Expr MatchArrow^ CaseBlock;
    Function: FunctionSig FunctionBlock;
        FunctionBlock: Expr | BlockBegin^ Expr BlockEnd^;
    Apply: ApplySym^ Ty [ Uuid ] ParamsBegin^ Exprs ParamsEnd^;
    Reference: ReferenceSym^ Ty;
    Labeled: Label Expr;
    NewTipe: TyKey^ Ident Equal^ Ty StmtEnd^ Expr;
    Card: CardKey^ Uuid Expr StmtEnd^ Expr;
    Brand: BrandKey^ Expr StmtEnd^ Expr;

Ty: Infer
    | This
    | NumberKey
    | StringKey
    | Effectful
    | Comment Ty
    | Trait
    | ProductTy
    | Sum
    | VecTy
    | SetTy
    | FunctionTy
    | LabeledTy
    | AttributedTy
    | Variable
    | LetTy
    | All
    | Exist
    ;
    Effectful: PerformSym^ EffectExpr Ty;
        EffectExpr: Effects | AddEffects | SubEffects| ApplyEffects;
        Effects: BlockBegin^ [ Effect { Comma^ Effect } ] BlockEnd^;
        AddEffects: SumSym^ EffectExpr { Comma^ EffectExpr } Dot^;
        SubEffects: Minus^ EffectExpr Comma^ EffectExpr Dot^;
        ApplyEffects: Ty ParamsBegin^ Tys ParamsEnd^;
    Trait: TraitKey^ BlockBegin^ { TraitMember } BlockEnd^;
        TraitMember: FunctionSig StmtEnd^;
    ProductTy: ProductKey^ BlockBegin^ [ Tys ] BlockEnd^;
    Sum: SumKey^ BlockBegin^ [ Tys ] BlockEnd^;
    VecTy: VecBegin^ Ty VecEnd^;
    SetTy: SetKey^ BlockBegin^ Ty BlockEnd^;
    FunctionTy: FunctionSig;
    LabeledTy: Label Ty;
    AttributedTy: Attribute Ty;
    Variable: Ident;
    LetTy: LetKey^ Ident Equal^ Ty StmtEnd^ Ty;
    All: AllKey^ GenericsBegin^ Ident [ TyAnno^ Trait ] GenericsEnd^ Ty;
    Exist: ExistKey^ GenericsBegin^ Ident [ TyAnno^ Trait ] GenericsEnd^ Ty;

// Utilities
Exprs: Expr { Comma^ Expr } [ Comma^ ];
Tys: Ty { Comma^ Ty } [ Comma^ ];
FunctionSig: FunctionKey^ ParamsBegin^ [ Tys ] ParamsEnd^ [ Arrow^ Ty ];
CaseBlock: BlockBegin^ Expr BlockBegin^
         | Expr [ Comma^ ];
Comment: InlineCommentBegin^ ".*"
       | BlockCommentBegin^ %push(BlockComment) "([^\*](\*[^/])?)*\*?" %pop() BlockCommentEnd^;
Attribute: AttributeSym^ Expr;
Label: LabelSym^ Expr;
Ident: "[^!-@\[-`\{-~\w][^\w]*"
     | "`[^!-@\[-`\{-~\w][^\w]*([\w]*[^!-@\[-`\{-~\w][^\w]*)*`";
Uuid: UuidKey^ "[\p{Nd}a-fA-F]{8}-?[\p{Nd}a-fA-F]{4}-?[\p{Nd}a-fA-F]{4}-?[\p{Nd}a-fA-F]{4}-?[\p{Nd}a-fA-F]{4}-?[\p{Nd}a-fA-F]{12}";
Effect: Ty EArrow^ Ty;

// Tokens
Comma: ",";
Dot: ".";
StmtEnd: ";";
TyAnno: ":";
BlockBegin: "\{";
BlockEnd: "\}";
Arrow: "\->";
EArrow: "\~>";
MatchArrow: "=>";
Hole: "\?";
VecBegin: "\[";
VecEnd: "\]";
AttributeSym: "#";
ParamsBegin: "\(";
ParamsEnd: "\)";
LabelSym: "@";
Equal: "=";
Infer: "_";
BlockCommentBegin: "/\*";
BlockCommentEnd: "\*/";
InlineCommentBegin: "//";
GenericsBegin: "<";
GenericsEnd: ">";
PerformSym: "!";
ContinueSym: "<\~";
ReferenceSym: "&";
ApplySym: "\^";
SumSym: "\+";
Minus: "\-";

// Keywords
DoKey: "do";
LetKey: "let";
SetKey: "set";
HandleKey: "handle";
MatchKey: "match";
FunctionKey: "fn";
TyKey: "type";
UuidKey: "uuid";
This: "self";
AllKey: "forall";
ExistKey: "exists";
TraitKey: "trait";
CardKey: "card";
BrandKey: "brand";
StringKey: "string";
NumberKey: "number";
SumKey: "enum";
ProductKey: "struct";
