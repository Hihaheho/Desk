use bevy::prelude::*;

use desk_plugin::DeskSystem;
use desk_window::{
    ctx::Ctx,
    widget::{Widget, WidgetId},
    window::{DefaultWindow, Window},
};
use deskc_ast::{expr::Expr, span::WithSpan};
use deskc_macros::ast;
use deskc_type::DsonTypeDeduction;
use dworkspace::{
    conversions::ast_type_to_type,
    prelude::{AttributePatch, Content, Event, OperandPatch},
    Workspace,
};

use once_cell::sync::Lazy;

pub struct PlaygroundPlugin;

impl Plugin for PlaygroundPlugin {
    fn build(&self, app: &mut App) {
        app.add_system(setup.label(DeskSystem::UpdateWidget));
    }
}

fn setup(mut window: Query<(&mut Window<egui::Context>, &Workspace), With<DefaultWindow>>) {
    if let Ok((mut window, _kernel)) = window.get_single_mut() {
        window.add_widget(WidgetId::new(), PlaygroundWidget);
    }
}

pub struct PlaygroundWidget;

impl Widget<egui::Context> for PlaygroundWidget {
    fn render(&mut self, ctx: &mut Ctx<egui::Context>) {
        egui::Window::new("Editor").show(ctx.backend, |ui| {
            if ui.button("Fibonacci").clicked() {
                create_nodes_for_ast(ctx, &FIBONACCI);
            }
        });
    }
}

const FIBONACCI: Lazy<WithSpan<Expr>> = Lazy::new(|| {
    ast!(
        r#"
        ~~ type aliases
        'type add \ *<@"l" 'integer, @"r" 'integer> -> @"sum" 'integer;
        'type sub \ *<@"l" 'integer, @"r" 'integer> -> @"diff" 'integer;
        'type eq \ *<@"l" 'real, @"r" 'real> -> +<@"equal" *<>, @"unequal" *<>>;
        'type fib \ 'integer -> 'integer;

        ~~ let fib
        $ \ 'integer -> 'match ^eq *<@"l" &'integer, @"r" 0> '{
          ~~ if number == 0)
          @"equal" *<> => 0
          ~~ if number != 0
          @"unequal" *<> => 'match ^eq *<@"l" &'integer, @"r" 1> '{
            @"equal" *<> => 1
            @"unequal" *<> =>
              ~~ adds fib(number - 1) and fib(number - 2)
              <'integer> ^add *<
                @"l" ^fib ^sub *<@"l" &'integer, @"r" 1>
                @"r" ^fib ^sub *<@"l" &'integer, @"r" 2>
              >
          }'
        }';
        ^fib(7)
    "#
    )
});

fn create_nodes_for_ast(ctx: &mut Ctx<egui::Context>, expr: &WithSpan<Expr>) {
    struct Visitor<'a, 'b> {
        ctx: &'a mut Ctx<'b, egui::Context>,
    }
    // FIXME: implement using ExprVisitor generated by `#[derive(Visitor)]`
    impl Visitor<'_, '_> {
        fn add_event(&mut self, event: Event) {
            self.ctx.add_event(event);
        }
        fn visit_expr(&mut self, expr: &WithSpan<Expr>) {
            let node_id = &expr.id;
            match &expr.value {
                Expr::Literal(literal) => {
                    use deskc_ast::expr::Literal::*;
                    let content = match literal {
                        String(string) => Content::String(string.clone()),
                        Integer(int) => Content::Integer(*int),
                        Rational(a, b) => Content::Rational(*a, *b),
                        Real(real) => Content::Real(*real),
                    };
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content,
                    });
                }
                Expr::Do { stmt, expr } => {
                    self.visit_expr(stmt);
                    self.visit_expr(expr);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Do,
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: stmt.id.clone(),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 1,
                            node_id: expr.id.clone(),
                        },
                    });
                }
                Expr::Let { definition, body } => {
                    self.visit_expr(definition);
                    self.visit_expr(body);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Let,
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: definition.id.clone(),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 1,
                            node_id: body.id.clone(),
                        },
                    });
                }
                Expr::Perform { input, output } => {
                    self.visit_expr(input);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Perform {
                            output: ast_type_to_type(output),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: input.id.clone(),
                        },
                    });
                }
                Expr::Continue { input, output } => {
                    self.visit_expr(input);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Continue {
                            output: ast_type_to_type(output),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: input.id.clone(),
                        },
                    });
                }
                Expr::Handle { expr, handlers } => {
                    self.visit_expr(expr);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Handle,
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: expr.id.clone(),
                        },
                    });
                    for handler in handlers {
                        let effect = &handler.value.effect;
                        self.visit_expr(&handler.value.handler);
                        todo!()
                    }
                }
                Expr::Apply {
                    function,
                    link_name,
                    arguments,
                } => {
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Apply {
                            ty: ast_type_to_type(function),
                            link_name: link_name.clone(),
                        },
                    });
                    for (index, argument) in arguments.iter().enumerate() {
                        self.visit_expr(argument);
                        self.add_event(Event::PatchOperand {
                            node_id: node_id.clone(),
                            patch: OperandPatch::Insert {
                                index,
                                node_id: argument.id.clone(),
                            },
                        });
                    }
                }
                Expr::Product(exprs) => {
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Product,
                    });
                    for (index, expr) in exprs.iter().enumerate() {
                        self.visit_expr(expr);
                        self.add_event(Event::PatchOperand {
                            node_id: node_id.clone(),
                            patch: OperandPatch::Insert {
                                index,
                                node_id: expr.id.clone(),
                            },
                        });
                    }
                }
                Expr::Match { of, cases } => {
                    self.visit_expr(of);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Match,
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: of.id.clone(),
                        },
                    });
                    for (index, case) in cases.iter().enumerate() {
                        self.visit_expr(&case.value.expr);
                        self.add_event(Event::CreateNode {
                            node_id: case.id.clone(),
                            content: Content::Case {
                                ty: ast_type_to_type(&case.value.ty),
                            },
                        });
                        self.add_event(Event::PatchOperand {
                            node_id: case.id.clone(),
                            patch: OperandPatch::Insert {
                                index: 0,
                                node_id: case.value.expr.id.clone(),
                            },
                        });
                        self.add_event(Event::PatchOperand {
                            node_id: node_id.clone(),
                            patch: OperandPatch::Insert {
                                index: index + 1,
                                node_id: case.id.clone(),
                            },
                        });
                    }
                }
                Expr::Typed { ty, item } => {
                    self.visit_expr(item);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Typed {
                            ty: ast_type_to_type(ty),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: item.id.clone(),
                        },
                    });
                }
                Expr::Hole => {
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Hole,
                    });
                }
                Expr::Function { parameter, body } => {
                    self.visit_expr(body);
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Function {
                            parameter: ast_type_to_type(parameter),
                        },
                    });
                    self.add_event(Event::PatchOperand {
                        node_id: node_id.clone(),
                        patch: OperandPatch::Insert {
                            index: 0,
                            node_id: body.id.clone(),
                        },
                    });
                }
                Expr::Vector(exprs) => {
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Vector,
                    });
                    for (index, expr) in exprs.iter().enumerate() {
                        self.visit_expr(expr);
                        self.add_event(Event::PatchOperand {
                            node_id: node_id.clone(),
                            patch: OperandPatch::Insert {
                                index,
                                node_id: expr.id.clone(),
                            },
                        });
                    }
                }
                Expr::Map(elems) => {
                    self.add_event(Event::CreateNode {
                        node_id: node_id.clone(),
                        content: Content::Map,
                    });
                    for (index, elem) in elems.iter().enumerate() {
                        self.visit_expr(&elem.value.key);
                        self.visit_expr(&elem.value.value);
                        self.add_event(Event::CreateNode {
                            node_id: elem.id.clone(),
                            content: Content::MapElem,
                        });
                        self.add_event(Event::PatchOperand {
                            node_id: elem.id.clone(),
                            patch: OperandPatch::Insert {
                                index: 0,
                                node_id: elem.value.key.id.clone(),
                            },
                        });
                        self.add_event(Event::PatchOperand {
                            node_id: elem.id.clone(),
                            patch: OperandPatch::Insert {
                                index: 1,
                                node_id: elem.value.value.id.clone(),
                            },
                        });
                        self.add_event(Event::PatchOperand {
                            node_id: node_id.clone(),
                            patch: OperandPatch::Insert {
                                index,
                                node_id: elem.id.clone(),
                            },
                        });
                    }
                }
                Expr::Attributed { attr, item } => {
                    self.visit_expr(item);
                    self.add_event(Event::PatchAttribute {
                        node_id: item.id.clone(),
                        patch: AttributePatch::Update {
                            key: attr.deduct_type(),
                            value: attr.clone(),
                        },
                    });
                }
                Expr::Brand { brand, item } => todo!(),
                Expr::Label { label, item } => todo!(),
                Expr::NewType { ident, ty, expr } => todo!(),
                Expr::Comment { text, item } => todo!(),
                Expr::Card { id, item, next } => todo!(),
            }
        }
    }
    Visitor { ctx }.visit_expr(expr);
}
